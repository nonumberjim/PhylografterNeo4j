(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'shutdown'"
p3
sS'layer'
p4
S'C:\\Documents and Settings\\Guest\\Desktop\\web2py\\applications\\Phylografter\\controllers/stree.py'
p5
sS'code'
p6
S'# coding: utf-8\n## tree = local_import("tree", reload=True)\n## build = local_import("build", reload=True)\n## link = local_import("link")\nimport sys\nsys.path.append(\'/Users/cbaron/Desktop/web2py/applications/phylografter/modules\')\nsys.path.append(\'/Users/cbaron/Desktop/web2py/applications/phylografter/modules/ivy\')\nimport tree\nimport build\nimport link\nimport ivy\nimport treeUtil\nimport re\nimport time\nimport os, types, string\nimport imp\nfrom tokenize import generate_tokens\nfrom cStringIO import StringIO\nfrom neo4j import GraphDatabase\n\n\n## ivy = local_import("ivy")\n\nfrom gluon.storage import Storage\n\nresponse.subtitle = "Source trees"\n\ndef index():\n    t = db.stree\n\n    class Virtual(object):\n        @virtualsettings(label=\'Study\')\n        def study_url(self):\n            study = t[self.stree.id].study\n            u = URL(c="study",f="view",args=[study.id])\n            s = study.citation\n            N = 50\n            if len(s)>N: s = s[:N-3]+" ..."\n            return A(s, _href=u, _title=study.citation)\n\n        @virtualsettings(label=\'Tree\')\n        def tree_url(self):\n            stree = t[self.stree.id]\n            u = URL(c="stree",f="svgView",args=[self.stree.id])\n            return A(stree.type, _href=u)\n\n        @virtualsettings(label=\'Focal Clade\')\n        def clade(self):\n            study = t[self.stree.id].study\n            fc = db.study[study].focal_clade\n            name = fc.name if fc else ""\n            return name\n            \n\n        @virtualsettings(label=\'OTUs\')\n        def ntax(self):\n            q = ((db.snode.tree==self.stree.id)&\n                 (db.snode.isleaf==True))\n            return db(q).count()\n\n    powerTable = plugins.powerTable\n    powerTable.datasource = t\n    powerTable.virtualfields = Virtual()\n    powerTable.dtfeatures["sScrollY"] = "100%"\n    powerTable.dtfeatures["sScrollX"] = "100%"\n    #powerTable.virtualfields = Virtual()\n    powerTable.headers = "labels"\n    powerTable.showkeycolumn = False\n    powerTable.dtfeatures["bJQueryUI"] = request.vars.get("jqueryui",True)\n    ## powerTable.uitheme = request.vars.get("theme","cupertino")\n    powerTable.uitheme = request.vars.get("theme","smoothness")\n    powerTable.dtfeatures["iDisplayLength"] = 25\n    powerTable.dtfeatures["aaSorting"] = [[6,\'desc\']]\n    powerTable.dtfeatures["sPaginationType"] = request.vars.get(\n        "pager","full_numbers"\n        ) # two_button scrolling\n    powerTable.columns = ["stree.id",\n                          "virtual.clade",\n                          "virtual.study_url",\n                          "virtual.tree_url",\n                          "virtual.ntax",\n                          ## "stree.contributor",\n                          "stree.uploaded"]\n    powerTable.hiddencolumns = ["stree.type"]\n\n    ## details = dict(detailscallback=URL(c="stree",f="details"))\n    powerTable.extra = dict(autoresize=True)\n   \n    return dict(table=powerTable.create())\n\ndef details():\n    return DIV()\n\ndef delete():\n    i = int(request.args(0) or 0)\n    rec = db.stree(i)\n    assert rec\n    db(db.snode.tree==i).delete()\n    rec.delete_record()\n\ndef _lookup_taxa(nodes):\n    def f(x):\n        try: float(x.label or "x"); return False\n        except: return True\n    v = [ (n.label or "").replace("_", " ") for n in filter(f, nodes) ]\n    t = db.taxon\n    rows = db(t.name.belongs(v)).select(t.name, t.id)\n    return dict([ (x.name, x.id) for x in rows ])\n\ndef _study_otus(study):\n    q = ((db.otu.study==db.study.id)&(db.study.id==study))\n    return db(q).select(db.otu.ALL)\n\ndef _insert_stree(study, data):\n    ##given form submission data, insert a source tree\n    \n    """root = ivy.tree.read(data.newick)\n    assert root, data.newick\n    ivy.tree.index(root)\n    nodes = list(root)\n    lab2tax = _lookup_taxa(nodes)\n    lab2otu = dict([ (x.label, x) for x in _study_otus(study) ])\n    stree = db.stree.insert(**data)\n    db.stree[stree].update_record(study=study)\n    i2n = {}\n    for n in nodes:\n        label = (n.label or "").replace("_", " ")\n        taxid = lab2tax.get(label)\n        otu = None\n        if n.isleaf:\n            otu = lab2otu.get(label)\n            if otu and otu.taxon: taxid = otu.taxon\n            if not otu:\n                otu = db.otu.insert(study=study, label=label, taxon=taxid)\n\n        i = db.snode.insert(label=n.label, isleaf=n.isleaf, otu=otu,\n                            next=n.next, back=n.back, depth=n.depth,\n                            length=n.length, tree=stree, taxon=taxid,\n                            pruned=False)\n        n.id = i\n        i2n[i] = n\n    ##     n.rec = Storage(taxon=taxid)\n\n    ## node2anc, node2desc = link.suggest(db, root)\n    ## for n, s in node2anc.items():\n    ##     if s:\n    ##         taxid = sorted(s)[-1][1]\n    ##         db.snode[n.id].update_record(taxon=taxid)\n\n    t = db.snode\n    if data.clade_labels_represent == "bootstrap values":\n        n2sup = {}\n        for n in filter(lambda x: x.children and x.label, nodes):\n            try: n2sup[n] = float(n.label)\n            except ValueError: pass\n        if n2sup:\n            m = max(n2sup.values())\n            if 1 <= m <= 101:\n                for n, sup in n2sup.items(): n2sup[n] = sup/100.\n            for n, sup in n2sup.items():\n                t[n.id].update_record(bootstrap_support=sup, label=None)\n\n    elif data.clade_labels_represent == "posterior support":\n        n2sup = {}\n        for n in filter(lambda x: x.children and x.label, nodes):\n            try: n2sup[n] = float(n.label)\n            except ValueError: pass\n        for n, sup in n2sup.items():\n            t[n.id].update_record(posterior_support=sup, label=None)\n                \n    for n in nodes:\n        if n.parent:\n            t[n.id].update_record(parent=n.parent.id)\n        n.label = str(n.id)\n        n.length = None\n    db.stree[stree].update_record(newick_idstr=root.write())\n    return stree"""\n\n    try:\n        datey = time.strftime( "%Y%m%d" )\n        ##print \'Remember this code for search: \' + datey\n\n\n        ##db = GraphDatabase(\'Test\')\n        ##print \'Your input is \' + data.newick\n    except:\n        print \'oops\'\n\n    """newickstring = StringIO(data.newick)\n\n    STRING = 1\n    stringdata = list(token[STRING] for token\n         in generate_tokens(newickstring.readline)\n         if token[STRING])\n\n    exists = db.node.indexes.exists(\'tree\')\n\n    if exists == 0:\n        with db.transaction:\n            tree_idx = db.node.indexes.create(\'tree\')\n\n    elif exists == 1:\n        tree_idx = db.node.indexes.get(\'tree\')\n\n    ##i is counter\n    i=0\n    value = stringdata[i]\n    nextvalue = stringdata[i+1]\n\n    ##print value\n    ##print nextvalue\n\n    first = 0\n    mynodelist=[]\n    with db.transaction:\n        node = db.node()\n        root = db.node(name="Root")\n        root[\'date\'] = nowdate  \n        root[\'uID\'] = newID\n        relationship = root.is_root(node)\n        ID = root.id\n\n    ##print ID\n\n    lp = 0\n    rp = 0\n\n    for i in range(0, len(stringdata)):\n        if value == \'(\':\n            first+=1\n            lp += 1\n            with db.transaction:\n                newnode = db.node()\n                relationship = newnode.has_parent(node)\n                ##print node\n                node = newnode\n                ##print newnode\n        elif value == \')\':\n            rp += 1\n            if i==len(stringdata)-1:\n                continue\n            else:\n                check = stringdata[i+1]\n                if re.match("^[A-Za-z]*$", check):\n                    with db.transaction:\n                        for rel in newnode.has_parent.outgoing:\n                            ##print node\n                            node = rel.end\n                            node[\'label\']=check           \n                else:\n                    with db.transaction:\n                        for rel in newnode.has_parent.outgoing:\n                            ##print node\n                            node = rel.end\n                            ##print node\n        elif value == \',\':\n            with db.transaction:\n                for rel in node.has_parent.outgoing:\n                    node = rel.end\n                    ##print node\n        elif value == \';\':\n            break\n        elif value == \':\':\n           ## print stringdata[i+1]\n            branchlength = float(stringdata[i+1])\n            with db.transaction:\n                node[\'length\'] = branchlength\n        else:\n            try:\n                float(value)               \n            except ValueError:\n                if lp == rp:\n                    continue\n                elif oldvalue == \')\':\n                    continue\n                else:\n                    if first == 1:\n                        with db.transaction:\n                            node[\'label\']=value\n                            ##print node\n                            ##print value\n                            first += 1\n                    else:\n                        with db.transaction:\n                            newnode = db.node()\n                            relationship = newnode.has_parent(node)\n                            mynodelist.append(db.node(name=value))\n                            newnode[\'label\']=value\n                            node = newnode\n                            ##print newnode\n                            ##print value                \n        if i <= len(stringdata)-2:\n            nextvalue = stringdata[i+1]\n        i+=1\n        oldvalue = value\n        value = nextvalue"""\n\n    db.shutdown()\n\n#@auth.requires_membership(\'contributor\')\n@auth.requires_login()\n\ndef create():\n    study = db.study(request.args(0)) or redirect(URL("index"))\n    def w(f,v):\n        u = URL(c="study",f="view",args=[study.id])\n        return A(_study_rep(study), _href=u)\n    db.stree.study.widget = w\n    \n    fields = ["study", "contributor", "newick",\n              "author_contributed",\n              "type",\n              "clade_labels_represent", "clade_labels_comment",\n              "branch_lengths_represent", "branch_lengths_comment",\n              "comment"]\n    form = SQLFORM(db.stree, fields=fields)\n    form.vars.study=int(study)\n\n    name = "%s %s" % (auth.user.first_name, auth.user.last_name)\n    form.vars.contributor = name\n    ## form.vars.newick = "(a,(b,((c,d),(e,f))));"\n    ## form.vars.comment = "test test"\n    ## base = "/home/rree/Dropbox/phylografter/private/Jansen-2007-PNAS/"\n    ## form.vars.newick = file(base+"Jansen_2007.newick").read()\n    ## form.vars.comment = "RAxML bootstrap tree; re-analysis of published data"\n    ## form.vars.type = "RAxML 7.2.6 bootstrap"\n    \n    treestr = ""\n    if form.accepts(request.vars, session, dbio=False):\n        response.flash ="accepted"\n        session.contributor = form.vars.contributor\n        i = _insert_stree(study, form.vars)\n        redirect(URL("v", args=[i]))\n\n    return dict(form=form)\n    \ndef edit():\n    rec = db.stree(request.args(0))\n    def w(f,v):\n        u = URL(c="study",f="view",args=[v])\n        return A(_study_rep(db.study(v)), _href=u)\n    db.stree.study.widget = w\n    response.subtitle = "Edit source tree %s" % rec.id\n    fields = ["study", "contributor", "newick", "type",\n              "clade_labels_represent", "clade_labels_comment",\n              "branch_lengths_represent", "branch_lengths_comment",\n              "comment"]\n    readonly = not auth.has_membership(role="contributor")\n    form = SQLFORM(db.stree, int(rec), fields=fields, showid=False,\n                   deletable=False, submit_button="Update record",\n                   readonly=readonly)\n    form.vars.study = rec.id\n    if form.accepts(request.vars, session):\n        response.flash = "record updated"\n    return dict(form=form)\n\ndef view():\n    return dict()\n\ndef sunburst():\n    i = int(request.args(0))\n    if i:\n        rec = db.stree(i)\n    return dict(rec=rec)\n\ndef d3():\n    i = int(request.args(0))\n    if i:\n        rec = db.stree(i)\n    return dict(rec=rec)\n\n\ndef svgView():\n    i = int(request.args(0))\n    if i:\n        rec = db.stree(i)\n    return dict(rec=rec)\n\ndef editOTUs():\n    response.title = \'Edit OTUs\'\n    return dict()\n\ndef getNodeInfo():\n    i = int(request.vars.nodeId)\n    node = db.snode[i]\n    color = "black"\n    label = node.label or "[%s]" % node.id\n    if node.taxon:\n        label = node.taxon.name\n        color = "green"\n    return {\'nodeId\': node.id, \'label\': label, \'labelcolor\': color}\n\ndef v():\n    rec = db.stree(request.args(0) or 0)\n    study = db.study(rec.study) \n    u = URL(c="study",f="view",args=[study.id])\n    study = A(_study_rep(study), _href=u, _target="_blank")\n    wscale = float(request.vars.wscale or 0.9)\n    wider = wscale+0.1; narrower = max(0.1, wscale-0.1)\n    wider = A("wider", _href=URL(args=request.args,\n                                 vars=dict(wscale="%0.1f" % wider)))\n    narrower = A("narrower", _href=URL(args=request.args,\n                                       vars=dict(wscale="%0.1f" % narrower)))\n    \n    treeurl = URL(c=\'stree\',f=\'treediv\',args=request.args,vars=request.vars)\n    return dict(treeurl=treeurl, wider=wider, narrower=narrower, study=study)\n\ndef load_html():\n    i = int(request.args(0) or 0)\n    root = build.stree(db, i)\n    nodes = list(root.iternodes())\n    for node in nodes:\n        label = node.rec.label or node.label\n        if node.rec.taxon:\n            label = db.taxon[node.rec.taxon].name\n        node.label = label\n    def onclick(nid):\n        u = URL(c="snode",f="update_snode.load", args=[nid])\n        return ("hbranch_clicked(%s, \'%s\', \'modal\', \'modal_content\');"\n                % (nid, u))\n    if auth.has_membership(role="contributor"): f = onclick\n    else: f = ""\n    div, mapping, w, h = tree.render_html(root, session, request,\n                                          db, onclick=f)\n    return dict(tree=div)\n\ndef treediv():\n    i = int(request.args(0) or 0)\n    root = build.stree(db, i)\n    nodes = list(root.iternodes())\n    for node in nodes:\n        label = node.rec.label or node.label\n        if node.rec.taxon:\n            label = db.taxon[node.rec.taxon].name\n        node.label = label\n    def onclick(nid):\n        u = URL(c="snode",f="update_snode.load", args=[nid])\n        return ("hbranch_clicked(%s, \'%s\', \'modal\', \'modal_content\');"\n                % (nid, u))\n    if auth.has_membership(role="contributor"): f = onclick\n    else: f = ""\n    wscale = float(request.vars.wscale or 0.9)\n    div, mapping, w, h = tree.render_html(root, session, request,\n                                          db, onclick=f,\n                                          wscale=wscale)\n    return div.xml()\n\ndef html():\n    i = int(request.args(0) or 0)\n    root = build.stree(db, i)\n    nodes = list(root.iternodes())\n    for node in nodes:\n        label = node.rec.label or node.label\n        if node.rec.taxon:\n            label = db.taxon[node.rec.taxon].name\n        node.label = label\n\n    modal = PluginMModal(id="mymodal", title="Edit node properties", content="")\n    mid = modal.id; cid = "c"+mid\n    def onclick(nid):\n        u = URL(c="snode",f="update_snode.load", args=[nid])\n        return "hbranch_clicked(%s, \'%s\', \'%s\', \'%s\');" % (nid, u, mid, cid)\n    if auth.has_membership(role="contributor"): f = onclick\n    else: f = ""\n    div, mapping, w, h = tree.render_html(root, session, request,\n                                          db, onclick=f)\n\n    return dict(tree=div, root=root, modal=modal, w=w, h=h)\n\n\ndef modalTreeObj():\n    return dict( tree = build.stree( db, request.args[0] ) )\n\n\ndef suggest():\n    i = int(request.args(0) or 0)\n    root = build.stree(db, i)\n    \n@auth.requires_membership(\'contributor\')\ndef import_cached_nexml():\n    key = "uploaded_nexml_%s" % auth.user.id\n    contributor = "%s %s" % (auth.user.first_name, auth.user.last_name)\n    ## nexml = cache.ram(key, lambda:None, time_expire=10000)\n    nexml = cache.ram(key, lambda:None, time_expire=10000)\n    if not nexml:\n        session.flash = "Please upload the Nexml file again"\n        redirect(URL(\'study\',\'tbimport\'))\n    cache.ram(key, lambda:nexml, time_expire=10000)\n    get = lambda x: nexml.meta.get(x) or None\n    treebase_id = int(get(\'tb:identifier.study\'))\n    study = db(db.study.treebase_id==treebase_id).select().first()\n    if not study:\n        session.flash = \'Study record needed!\'\n        redirect(URL(\'study\',\'tbimport2\'))\n    d = dict([ (x.attrib.id, x) for x in nexml.trees ])\n    t = d.get(request.args(0))\n    if not t:\n        session.flash = \'Cannot find tree in cache\'\n        redirect(URL(\'study\',\'tbimport2\'))\n\n    ivy.tree.index(t.root)\n\n    for n in t.root.leaves():\n        if not n.otu.otu:\n            session.flash = \'Leaf node %s lacks OTU record\' % (n.label or n.id)\n            redirect(URL(\'study\',\'tbimport2\'))\n\n    ## for leaf in t.root.leaves():\n    ##     print leaf.__dict__\n    ## for k, v in nexml.otus.items():\n    ##     print v\n\n    #print t.root.write()\n    ## print t.attrib\n    \n    sdata = dict(study=study.id,\n                 contributor=contributor,\n                 newick=t.root.write().replace(" ", "_"),\n                 author_contributed=True,\n                 tb_tree_id=t.attrib.id,\n                 type=t.attrib.label)\n\n    for k,v in sdata.items():\n        db.stree[k].default=v\n\n    def w(f,v):\n        u = URL(c="study",f="view",args=[study.id])\n        return A(_study_rep(study), _href=u)\n    db.stree.study.widget = w\n    db.stree.uploaded.readable=False\n    form = SQLFORM(db.stree)\n    if form.accepts(request.vars, session):\n\n        bootstraps = {}\n        if form.vars.clade_labels_represent == "bootstrap values":\n            for n in t.root.iternodes(lambda x: x.children and x.label):\n                try: bootstraps[n] = float(n.label)\n                except ValueError: pass\n            for n in bootstraps:\n                n.label = None\n\n        elif form.vars.branch_lengths_represent == "bootstrap values":\n            for n in t.root.iternodes(\n                lambda x: x.children and x.length is not None):\n                try: bootstraps[n] = float(n.label)\n                except ValueError: pass\n            for n in bootstraps:\n                n.length = None\n\n        if bootstraps:\n            m = max(bootstraps.values())\n            if 1 <= m <= 101:\n                for n, sup in bootstraps.items():\n                    bootstraps[n] = sup/100.\n\n        posteriors = {}\n        if form.vars.clade_labels_represent == "posterior support":\n            for n in t.root.iternodes(lambda x: x.children and x.label):\n                try: posteriors[n] = float(n.label)\n                except ValueError: pass\n            for n in posteriors:\n                n.label = None\n\n        elif form.vars.branch_lengths_represent == "posterior support":\n            for n in t.root.iternodes(\n                lambda x: x.children and x.length is not None):\n                posteriors[n] = n.length\n            for n in posteriors:\n                n.length = None\n\n        for d in filter(None, (bootstraps, posteriors)):\n            m = max(d.values())\n            if 1 <= m <= 101:\n                for n, sup in d.items():\n                    d[n] = sup/100.\n\n        i2n = {}\n        for n in t.root.iternodes():\n            taxid = None\n            label = n.otu.otu.label if n.isleaf and n.otu.otu else n.label\n            if n.isleaf and n.otu.otu and n.otu.otu.taxon:\n                taxid = n.otu.otu.taxon\n            else:\n                taxon = db(db.taxon.name==label).select().first()\n                if taxon: taxid=taxon.id\n\n            i = db.snode.insert(label=label,\n                                isleaf=n.isleaf,\n                                otu=n.otu.otu.id if n.isleaf and n.otu else None,\n                                next=n.next, back=n.back, depth=n.depth,\n                                length=n.length,\n                                bootstrap_support=bootstraps.get(n),\n                                posterior_support=posteriors.get(n),\n                                tree=form.vars.id,\n                                taxon=taxid,\n                                pruned=False)\n            n.id = i\n            i2n[i] = n\n\n        for n in t.root.iternodes():\n            if n.parent:\n                db.snode[n.id].update_record(parent=n.parent.id)\n            n.label = str(n.id)\n            n.length = None\n        db.stree[form.vars.id].update_record(newick_idstr=t.root.write())\n\n        session.flash = \'tree %s inserted\' % t.attrib.id\n        redirect(URL(\'study\',\'tbimport_trees\'))\n\n    return dict(study=study, tree=t, form=form)\n\nresponse._vars=response._caller(create)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Documents and Settings\\Guest\\Desktop\\web2py\\gluon\\restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "C:\\Documents and Settings\\Guest\\Desktop\\web2py\\applications\\Phylografter\\controllers/stree.py", line 612, in <module>\n  File "C:\\Documents and Settings\\Guest\\Desktop\\web2py\\gluon\\globals.py", line 173, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Documents and Settings\\Guest\\Desktop\\web2py\\gluon\\tools.py", line 2575, in f\n    return action(*a, **b)\n  File "C:\\Documents and Settings\\Guest\\Desktop\\web2py\\applications\\Phylografter\\controllers/stree.py", line 332, in create\n    i = _insert_stree(study, form.vars)\n  File "C:\\Documents and Settings\\Guest\\Desktop\\web2py\\applications\\Phylografter\\controllers/stree.py", line 298, in _insert_stree\n    db.shutdown()\n  File "C:\\Documents and Settings\\Guest\\Desktop\\web2py\\gluon\\dal.py", line 6343, in __getattr__\n    return self[key]\n  File "C:\\Documents and Settings\\Guest\\Desktop\\web2py\\gluon\\dal.py", line 6337, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'shutdown\'\n'
p11
s.